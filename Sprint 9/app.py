{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78d9c5c9-8c25-442c-974f-8d9986421f19",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pickle\n",
    "import pandas as pd\n",
    "\n",
    "# Cargar el modelo y el escalador\n",
    "def load_model_and_scaler():\n",
    "    \"\"\"Carga el modelo y el escalador desde archivos pickle.\"\"\"\n",
    "    with open('LogisticRegression.pkl', 'rb') as model_file:\n",
    "        model = pickle.load(model_file)\n",
    "    with open('scaler.pkl', 'rb') as scaler_file:\n",
    "        scaler = pickle.load(scaler_file)\n",
    "    return model, scaler\n",
    "\n",
    "model, scaler = load_model_and_scaler()\n",
    "\n",
    "# Título de la aplicación\n",
    "st.title(\"Predicción de Suscripción a Depósitos a Plazo\")\n",
    "\n",
    "# Entrada de datos del usuario\n",
    "st.header(\"Introduce los datos del cliente:\")\n",
    "\n",
    "age = st.number_input(\"Edad:\", min_value=16, max_value=125, value=30)\n",
    "education = st.radio(\"Nivel educativo:\", ['primaria', 'secundaria', 'terciaria'])\n",
    "default = st.radio(\"Tiene crédito en mora:\", ['no', 'sí'])\n",
    "balance = st.number_input(\"Saldo de la cuenta (en euros):\", value=0)\n",
    "housing = st.radio(\"¿Tiene hipoteca?\", ['no', 'sí'])\n",
    "loan = st.radio(\"¿Tiene un préstamo personal?\", ['no', 'sí'])\n",
    "pdays = st.number_input(\"Días desde el último contacto con la campaña (pdays):\", value=-1)\n",
    "\n",
    "job = st.selectbox(\"Tipo de trabajo:\", \n",
    "                   ['office', 'other', 'self-employed', 'service', 'student', \n",
    "                    'unemployed', 'nan'])\n",
    "marital = st.radio(\"Estado civil:\", ['married', 'single'])\n",
    "\n",
    "# Crear DataFrame con los datos del usuario\n",
    "user_data = pd.DataFrame({\n",
    "    'age': [age],\n",
    "    'education': [education],\n",
    "    'default': [default],\n",
    "    'balance': [balance],\n",
    "    'housing': [housing],\n",
    "    'loan': [loan],\n",
    "    'pdays': [pdays],\n",
    "    'job': [job],\n",
    "    'marital': [marital]\n",
    "})\n",
    "\n",
    "# Procesar los datos\n",
    "user_data['default'] = user_data['default'].map({'no': 0, 'sí': 1}).astype(int)\n",
    "user_data['housing'] = user_data['housing'].map({'no': 0, 'sí': 1}).astype(int)\n",
    "user_data['loan'] = user_data['loan'].map({'no': 0, 'sí': 1}).astype(int)\n",
    "user_data['education'] = user_data['education'].map({'primaria': 1, 'secundaria': 2, 'terciaria': 3}).astype(int)\n",
    "\n",
    "# Codificar variables categóricas\n",
    "user_encoded_data = pd.get_dummies(user_data, columns=['job', 'marital'])\n",
    "\n",
    "# Asegurar que las columnas necesarias están presentes\n",
    "required_columns = [\n",
    "    'age', 'education', 'default', 'balance', 'housing', 'loan', 'pdays',\n",
    "    'job_office', 'job_other', 'job_self-employed', 'job_service', 'job_student',\n",
    "    'job_unemployed', 'job_nan', 'marital_married', 'marital_single'\n",
    "]\n",
    "for col in required_columns:\n",
    "    if col not in user_encoded_data.columns:\n",
    "        user_encoded_data[col] = 0\n",
    "user_encoded_data = user_encoded_data[required_columns]\n",
    "\n",
    "# Estandarizar las columnas necesarias\n",
    "scale_variables = ['age', 'balance', 'pdays']\n",
    "user_encoded_data[scale_variables] = scaler.transform(user_encoded_data[scale_variables])\n",
    "\n",
    "# Realizar la predicción\n",
    "prediction = model.predict(user_encoded_data)\n",
    "\n",
    "# Mostrar el resultado\n",
    "st.header(\"Resultado de la Predicción:\")\n",
    "if prediction[0] == 1:\n",
    "    st.success(\"El cliente probablemente SE SUSCRIBIRÁ a un depósito a plazo.\")\n",
    "else:\n",
    "    st.error(\"El cliente probablemente NO SE SUSCRIBIRÁ a un depósito a plazo.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
